package ru.itmo.wp.model.repository;

import ru.itmo.wp.model.database.DatabaseUtils;
import ru.itmo.wp.model.domain.BasicEntity;
import ru.itmo.wp.model.exception.RepositoryException;

import javax.sql.DataSource;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public abstract class AbstractBasicRepository<Entity extends BasicEntity> {

    protected final DataSource DATA_SOURCE = DatabaseUtils.getDataSource();

    protected Entity find(long id) {
        return findBy("WHERE id=?", id);
    }

    protected List<Entity> findAll() {
        return findAllBy("ORDER BY creationTime DESC");
    }


    protected void mapArgs(PreparedStatement statement, Object... args) throws SQLException {
        for (int i = 0; i < args.length; i++) {
            Object arg = args[i];

            if (arg instanceof Long) {
                statement.setLong(i + 1, (Long) arg);
            } else if (arg instanceof Boolean) {
                statement.setBoolean(i + 1, (Boolean) arg);
            } else if (arg instanceof Enum) {
                statement.setString(i + 1, arg.toString());
            } else if (arg instanceof String) {
                statement.setString(i + 1, (String) arg);
            } else {
                throw new RepositoryException("Cant convert object: " + arg);
            }
        }
    }

    protected Entity findBy(String sqlQuery, Object... args) {
        try (Connection connection = DATA_SOURCE.getConnection()) {
            String query = "SELECT * FROM %s %s".formatted(getTableName(), sqlQuery);
            try (PreparedStatement statement = connection.prepareStatement(query)) {
                mapArgs(statement, args);
                try (ResultSet resultSet = statement.executeQuery()) {
                    return toEntity(statement.getMetaData(), resultSet);
                }
            }
        } catch (SQLException e) {
            throw new RepositoryException("Can't find " + getTableName(), e);
        }
    }

    protected List<Entity> findAllBy(String sqlQuery, Object... args) {
        List<Entity> entities = new ArrayList<>();
        try (Connection connection = DATA_SOURCE.getConnection()) {
            String query = "SELECT * FROM %s %s".formatted(getTableName(), sqlQuery);
            try (PreparedStatement statement = connection.prepareStatement(query)) {
                mapArgs(statement, args);
                try (ResultSet resultSet = statement.executeQuery()) {
                    Entity entity;
                    while ((entity = toEntity(statement.getMetaData(), resultSet)) != null) {
                        entities.add(entity);
                    }
                }
            }
        } catch (SQLException e) {
            throw new RepositoryException("Can't find " + getTableName(), e);
        }
        return entities;
    }


    public void save(Entity entity, String saveFields, String saveValues, Object... args) {
        try (Connection connection = DATA_SOURCE.getConnection()) {
            String query = "INSERT INTO `%s` (%s) VALUES (%s)".formatted(getTableName(), saveFields, saveValues);
            try (PreparedStatement statement = connection.prepareStatement(
                    query,
                    Statement.RETURN_GENERATED_KEYS
            )) {
                mapArgs(statement, args);
                if (statement.executeUpdate() != 1) {
                    throw new RepositoryException("Can't save " + getTableName());
                } else {
                    ResultSet generatedKeys = statement.getGeneratedKeys();
                    if (generatedKeys.next()) {
                        entity.setId(generatedKeys.getLong(1));
                        entity.setCreationTime(find(entity.getId()).getCreationTime());
                    } else {
                        throw new RepositoryException("Can't save " + getTableName() +
                                " [no autogenerated fields].");
                    }
                }
            }
        } catch (SQLException e) {
            throw new RepositoryException("Can't save " + getTableName(), e);
        }
    }

    protected void update(String sqlQuery, Object... args) {
        try (Connection connection = DATA_SOURCE.getConnection()) {
            String query = "UPDATE %s %s".formatted(getTableName(), sqlQuery);
            try (PreparedStatement statement = connection.prepareStatement(query)) {
                mapArgs(statement, args);
                if (statement.executeUpdate() != 1) {
                    throw new RepositoryException("Can't update " + getTableName());
                }
            }
        } catch (SQLException e) {
            throw new RepositoryException("Can't find " + getTableName(), e);
        }
    }

    protected int findCount() {
        try (Connection connection = DATA_SOURCE.getConnection()) {
            String query = "SELECT COUNT(*) FROM %s".formatted(getTableName());
            try (PreparedStatement statement = connection.prepareStatement(query)) {
                try (ResultSet resultSet = statement.executeQuery()) {
                    resultSet.next();
                    return resultSet.getInt(1);
                }
            }
        } catch (SQLException e) {
            throw new RepositoryException("Can't find count", e);
        }
    }


    protected abstract Entity toEntity(ResultSetMetaData metaData, ResultSet resultSet) throws SQLException;


    protected abstract String getTableName();
}
